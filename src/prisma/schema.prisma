generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum NotificationCode {
  NOTIF001
  NOTIF002
  NOTIF003
}

model Otp {
  id         String    @id @default(cuid())
  userId     String
  type       String
  code       String
  verified   Boolean   @default(false)
  attempts   Int       @default(0)
  token      String?
  expiresAt  DateTime  @db.Timestamptz(6)
  verifiedAt DateTime?
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt @db.Timestamptz(6)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
}

model AccountDeletionRequest {
  id                String                @id @default(cuid())
  userId            String
  requestedByUserId String
  companyId         String
  departmentId      String?
  status            DeletionRequestStatus @default(pending)
  requestReason     String?
  requestedAt       DateTime              @default(now()) @db.Timestamptz(6)
  reviewedBy        String?
  reviewedAt        DateTime?             @db.Timestamptz(6)
  reviewNotes       String?
  completedAt       DateTime?             @db.Timestamptz(6)
  verificationToken String?               @unique
  verificationUsed  Boolean               @default(false)
  createdAt         DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime              @updatedAt @db.Timestamptz(6)

  user       User        @relation("DeletionRequester", fields: [userId], references: [id], onDelete: Cascade)
  company    Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  department Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  reviewer   User?       @relation("DeletionReviewer", fields: [reviewedBy], references: [id], onDelete: SetNull)

  @@index([userId, status])
  @@index([companyId, status])
  @@index([status, createdAt])
}

model NotificationLog {
  id               String           @id @default(cuid())
  userId           String
  companyId        String
  departmentId     String?
  notificationCode NotificationCode
  title            String?
  message          String?
  payload          Json? // Can store extra data like { requestId: "abc123" }
  seen             Boolean          @default(false)
  seenAt           DateTime?        @db.Timestamptz(6)
  createdAt        DateTime         @default(now()) @db.Timestamptz(6)

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  company    Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  department Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)

  @@index([userId, seen])
  @@index([companyId, notificationCode])
  @@index([departmentId])
}

model PaySchedule {
  id                String       @id @default(cuid())
  companyId         String
  frequency         PayFrequency
  firstCutoffEndDay Int?
  paydayOffsetDays  Int?
  timezone          String?
  isActive          Boolean      @default(true)
  createdAt         DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime     @updatedAt @db.Timestamptz(6)
  company           Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  runs              PayrollRun[]
}

model PayrollRun {
  id          String           @id @default(cuid())
  companyId   String
  scheduleId  String?
  periodStart DateTime         @db.Timestamptz(6)
  periodEnd   DateTime         @db.Timestamptz(6)
  status      PayrollRunStatus @default(draft)
  totalGross  Decimal          @default(0) @db.Decimal(14, 2)
  totalNet    Decimal          @default(0) @db.Decimal(14, 2)
  notes       String?
  createdAt   DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime         @updatedAt @db.Timestamptz(6)
  entries     PayrollEntry[]
  company     Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  schedule    PaySchedule?     @relation(fields: [scheduleId], references: [id])

  @@unique([companyId, periodStart, periodEnd])
  @@index([companyId, periodStart, periodEnd])
}

model PayrollEntry {
  id              String        @id @default(cuid())
  runId           String
  userId          String
  basicPay        Decimal       @default(0) @db.Decimal(14, 2)
  overtimePay     Decimal       @default(0) @db.Decimal(14, 2)
  nightDiffPay    Decimal       @default(0) @db.Decimal(14, 2)
  holidayPay      Decimal       @default(0) @db.Decimal(14, 2)
  leavePay        Decimal       @default(0) @db.Decimal(14, 2)
  allowances      Decimal       @default(0) @db.Decimal(14, 2)
  otherEarnings   Decimal       @default(0) @db.Decimal(14, 2)
  lateUndertime   Decimal       @default(0) @db.Decimal(14, 2)
  absences        Decimal       @default(0) @db.Decimal(14, 2)
  otherDeductions Decimal       @default(0) @db.Decimal(14, 2)
  sssEmployee     Decimal       @default(0) @db.Decimal(14, 2)
  philHealthEmp   Decimal       @default(0) @db.Decimal(14, 2)
  pagIbigEmp      Decimal       @default(0) @db.Decimal(14, 2)
  withholdingTax  Decimal       @default(0) @db.Decimal(14, 2)
  grossPay        Decimal       @default(0) @db.Decimal(14, 2)
  netPay          Decimal       @default(0) @db.Decimal(14, 2)
  payslipNumber   String?       @unique
  meta            Json?
  createdAt       DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime      @updatedAt @db.Timestamptz(6)
  run             PayrollRun    @relation(fields: [runId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  lines           PayrollLine[]

  @@unique([runId, userId])
  @@index([userId])
}

model PayrollLine {
  id        String          @id @default(cuid())
  entryId   String
  type      PayrollLineType
  code      String
  label     String
  amount    Decimal         @db.Decimal(14, 2)
  meta      Json?
  createdAt DateTime        @default(now()) @db.Timestamptz(6)
  entry     PayrollEntry    @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@index([entryId, type, code])
}

model WithholdingTaxBracket {
  id            String         @id @default(cuid())
  country       PayrollCountry
  frequency     PayFrequency
  authority     TaxAuthority
  stateCode     String?
  status        String?
  minBase       Decimal        @db.Decimal(14, 2)
  maxBase       Decimal?       @db.Decimal(14, 2)
  baseTax       Decimal        @db.Decimal(14, 2)
  excessRate    Decimal        @db.Decimal(5, 4)
  effectiveFrom DateTime       @db.Timestamptz(6)
  effectiveTo   DateTime?      @db.Timestamptz(6)

  @@index([country, frequency, authority, stateCode, effectiveFrom, effectiveTo])
}

model ContributionBracket {
  id            String         @id @default(cuid())
  country       PayrollCountry
  agency        Agency
  frequency     PayFrequency
  stateCode     String?
  minSalaryBase Decimal        @db.Decimal(14, 2)
  maxSalaryBase Decimal?       @db.Decimal(14, 2)
  employeeRate  Decimal?       @db.Decimal(7, 6)
  employerRate  Decimal?       @db.Decimal(7, 6)
  employeeFixed Decimal?       @db.Decimal(14, 2)
  employerFixed Decimal?       @db.Decimal(14, 2)
  effectiveFrom DateTime       @db.Timestamptz(6)
  effectiveTo   DateTime?      @db.Timestamptz(6)

  @@index([country, agency, stateCode, effectiveFrom, effectiveTo])
}

model EarningType {
  id        String   @id @default(cuid())
  companyId String
  code      String
  label     String
  isTaxable Boolean  @default(true)
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, code])
}

model DeductionType {
  id        String   @id @default(cuid())
  companyId String
  code      String
  label     String
  isPreTax  Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, code])
}

model AttendanceSummary {
  id               String   @id @default(cuid())
  userId           String
  date             DateTime @db.Date
  regularHours     Decimal  @default(0) @db.Decimal(6, 2)
  overtimeHours    Decimal  @default(0) @db.Decimal(6, 2)
  nightDiffHours   Decimal  @default(0) @db.Decimal(6, 2)
  leavePaidHours   Decimal  @default(0) @db.Decimal(6, 2)
  leaveUnpaidHours Decimal  @default(0) @db.Decimal(6, 2)
  lateMinutes      Int      @default(0)
  undertimeMinutes Int      @default(0)
  isHoliday        Boolean  @default(false)
  holidayType      String?
  isRestDay        Boolean  @default(false)
  createdAt        DateTime @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime @updatedAt @db.Timestamptz(6)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
}

model LeavePolicy {
  id               String           @id @default(cuid())
  companyId        String
  leaveType        String
  annualAllocation Decimal          @db.Decimal(6, 2)
  accrualFrequency AccrualFrequency @default(monthly)
  accrualUnit      AccrualUnit      @default(hours)
  carryOverAllowed Boolean          @default(false)
  carryOverLimit   Decimal?         @db.Decimal(6, 2)
  negativeAllowed  Boolean          @default(false)
  createdAt        DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime         @updatedAt @db.Timestamptz(6)
  balances         LeaveBalance[]
  company          Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, leaveType])
}

model LeaveBalance {
  id            String      @id @default(cuid())
  userId        String
  policyId      String
  balanceHours  Decimal     @default(0) @db.Decimal(8, 2)
  lastAccrualAt DateTime?   @db.Timestamptz(6)
  createdAt     DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime    @updatedAt @db.Timestamptz(6)
  policy        LeavePolicy @relation(fields: [policyId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, policyId])
}

model User {
  id                       String                   @id @default(cuid())
  username                 String                   @unique
  email                    String
  password                 String
  companyId                String?
  departmentId             String?
  role                     userRole                 @default(admin)
  status                   userStatus               @default(active)
  createdAt                DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime                 @default(now()) @updatedAt @db.Timestamptz(6)
  employeeId               String?
  hireDate                 DateTime?                @db.Timestamptz(6)
  deviceToken              String?
  AttendanceSummary        AttendanceSummary[]
  Deduction                Deduction[]
  supervisedDepartments    Department[]             @relation("DepartmentSupervisor")
  supervisedEmployees      EmploymentDetail[]       @relation("Supervisor")
  employmentDetail         EmploymentDetail?
  ApprovedLeaves           Leave[]                  @relation("approver")
  Leave                    Leave[]
  LeaveBalance             LeaveBalance[]
  LocationRestriction      LocationRestriction[]
  approvedOT               Overtime[]               @relation("OTApprover")
  requestedOT              Overtime[]               @relation("OTRequester")
  Payroll                  Payroll[]
  PayrollEntry             PayrollEntry[]
  Subscription             Subscription[]
  TimeLog                  TimeLog[]
  company                  Company?                 @relation(fields: [companyId], references: [id], onDelete: Cascade)
  department               Department?              @relation("DepartmentUsers", fields: [departmentId], references: [id])
  UserActivity             UserActivity[]
  presence                 UserPresence?
  profile                  UserProfile?
  UserRate                 UserRate[]
  UserShift                UserShift[]
  deletionRequests         AccountDeletionRequest[] @relation("DeletionRequester")
  reviewedDeletionRequests AccountDeletionRequest[] @relation("DeletionReviewer")
  NotificationLog          NotificationLog[]
  otp                      Otp[]

  @@unique([companyId, email])
}

model UserProfile {
  id                    String    @id @default(cuid())
  userId                String    @unique
  username              String    @unique
  email                 String
  firstName             String?
  lastName              String?
  phoneNumber           String?
  createdAt             DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
  addressLine           String?
  city                  String?
  dateOfBirth           DateTime? @db.Date
  emergencyContactName  String?
  emergencyContactPhone String?
  postalCode            String?
  ssnItin               String?   @unique
  state                 String?
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmploymentDetail {
  id               String            @id @default(cuid())
  userId           String            @unique
  jobTitle         String?
  departmentId     String?
  supervisorId     String?
  employmentStatus employmentStatus?
  exemptStatus     exemptStatus?
  employmentType   employmentType?
  probationEndDate DateTime?         @db.Date
  workLocation     workLocation?
  timeZone         String?
  createdAt        DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime          @default(now()) @updatedAt @db.Timestamptz(6)
  workState        String?
  department       Department?       @relation("DepartmentEmploymentDetails", fields: [departmentId], references: [id])
  supervisor       User?             @relation("Supervisor", fields: [supervisorId], references: [id])
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPresence {
  id             String         @id @default(cuid())
  userId         String         @unique
  presenceStatus PresenceStatus @default(available)
  lastActiveAt   DateTime       @default(now()) @db.Timestamptz(6)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id                      String                   @id @default(cuid())
  name                    String                   @unique
  userId                  String?                  @unique
  createdAt               DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime                 @default(now()) @updatedAt @db.Timestamptz(6)
  country                 String?
  currency                String?
  language                String?
  defaultShiftHours       Decimal?                 @default(8.00) @db.Decimal(5, 2)
  minimumLunchMinutes     Int?                     @default(60)
  addressLine1            String?
  addressLine2            String?
  businessEmail           String?                  @unique
  city                    String?
  dba                     String?
  ein                     String?                  @unique
  phoneNumber             String?
  postalCode              String?
  state                   String?
  stateTaxIds             Json?
  websiteUrl              String?
  payrollCountry          PayrollCountry           @default(US)
  stateCode               String?
  deductionTypes          DeductionType[]
  Department              Department[]
  earningTypes            EarningType[]
  Holiday                 Holiday[]
  LeavePolicy             LeavePolicy[]
  Location                Location[]
  paySchedules            PaySchedule[]
  runs                    PayrollRun[]
  Shift                   Shift[]
  ShiftSchedule           ShiftSchedule[]
  Subscription            Subscription[]
  Tax                     Tax[]
  User                    User[]
  overtimes               Overtime[]
  accountDeletionRequests AccountDeletionRequest[]

  NotificationLog NotificationLog[]
}

model Department {
  id                      String                   @id @default(cuid())
  companyId               String
  name                    String
  supervisorId            String?
  createdAt               DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime                 @default(now()) @updatedAt @db.Timestamptz(6)
  company                 Company                  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  supervisor              User?                    @relation("DepartmentSupervisor", fields: [supervisorId], references: [id])
  employmentDetails       EmploymentDetail[]       @relation("DepartmentEmploymentDetails")
  users                   User[]                   @relation("DepartmentUsers")
  overtimes               Overtime[]
  accountDeletionRequests AccountDeletionRequest[]

  NotificationLog NotificationLog[]
}

model UserRate {
  id         String   @id @default(cuid())
  userId     String
  hourlyRate Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tax {
  id        String   @id @default(cuid())
  companyId String
  taxName   String
  taxRate   Decimal  @db.Decimal(5, 2)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Deduction {
  id            String   @id @default(cuid())
  userId        String
  deductionName String
  amount        Decimal  @db.Decimal(10, 2)
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payroll {
  id          String   @id @default(cuid())
  userId      String
  grossSalary Decimal  @db.Decimal(10, 2)
  tax         Decimal  @db.Decimal(10, 2)
  deductions  Decimal  @db.Decimal(10, 2)
  netSalary   Decimal  @db.Decimal(10, 2)
  payrollDate DateTime @db.Timestamptz(6)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id                String   @id @default(cuid())
  stripeId          String
  companyName       String
  email             String
  amount            Decimal  @db.Decimal(10, 2)
  paymentMethod     String?
  paymentMethodType String?
  cardLast4         String?
  cardBrand         String?
  cardExpMonth      Int?
  cardExpYear       Int?
  paymentReceiptUrl String?
  paymentIntentId   String?
  planId            String?
  paymentStatus     String?
  paymentDate       DateTime @default(now()) @db.Timestamptz(6)
  createdAt         DateTime @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime @default(now()) @updatedAt @db.Timestamptz(6)
}

model Location {
  id                  String                @id @default(cuid())
  companyId           String
  name                String?
  latitude            Decimal               @db.Decimal(9, 6)
  longitude           Decimal               @db.Decimal(9, 6)
  radius              Decimal?              @db.Decimal(6, 2)
  createdAt           DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime              @default(now()) @updatedAt @db.Timestamptz(6)
  company             Company               @relation(fields: [companyId], references: [id])
  LocationRestriction LocationRestriction[]
}

model LocationRestriction {
  id                String   @id @default(cuid())
  userId            String
  locationId        String
  restrictionStatus Boolean  @default(true)
  createdAt         DateTime @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  location          Location @relation(fields: [locationId], references: [id])
  user              User     @relation(fields: [userId], references: [id])

  @@unique([userId, locationId])
}

model UserActivity {
  id                  String   @id @default(cuid())
  userId              String
  activityDescription String
  createdAt           DateTime @default(now()) @db.Timestamptz(6)
  user                User     @relation(fields: [userId], references: [id])
}

model Shift {
  id                     String          @id @default(cuid())
  companyId              String
  shiftName              String
  startTime              DateTime        @db.Time(6)
  endTime                DateTime        @db.Time(6)
  crossesMidnight        Boolean         @default(false)
  differentialMultiplier Decimal         @default(1.0)
  createdAt              DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
  company                Company         @relation(fields: [companyId], references: [id])
  ShiftSchedule          ShiftSchedule[]
  UserShift              UserShift[]
}

model ShiftSchedule {
  id                String    @id @default(cuid())
  companyId         String
  shiftId           String
  recurrencePattern String
  startDate         DateTime
  endDate           DateTime?
  assignedToAll     Boolean   @default(false)
  assignedUserId    String?
  createdAt         DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime  @updatedAt @db.Timestamptz(6)
  company           Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  shift             Shift     @relation(fields: [shiftId], references: [id], onDelete: Cascade)
}

model UserShift {
  id              String            @id @default(cuid())
  userId          String
  shiftId         String
  assignedDate    DateTime          @db.Timestamptz(6)
  createdAt       DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime          @updatedAt @db.Timestamptz(6)
  ShiftRecurrence ShiftRecurrence[]
  shift           Shift             @relation(fields: [shiftId], references: [id])
  user            User              @relation(fields: [userId], references: [id])
}

model ShiftRecurrence {
  id                String    @id @default(cuid())
  userShiftId       String
  recurrencePattern String
  createdAt         DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime  @updatedAt @db.Timestamptz(6)
  userShift         UserShift @relation(fields: [userShiftId], references: [id])
}

model TimeLog {
  id           String     @id @default(cuid())
  userId       String
  timeIn       DateTime   @db.Timestamptz(6)
  timeOut      DateTime?  @db.Timestamptz(6)
  coffeeBreaks Json?
  lunchBreak   Json?
  deviceInfo   Json?
  location     Json?
  status       Boolean    @default(true)
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime   @default(now()) @updatedAt @db.Timestamptz(6)
  lateHours    Decimal?   @db.Decimal(5, 2)
  overtime     Overtime[]
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Holiday {
  id          String       @id @default(cuid())
  companyId   String
  name        String
  date        DateTime     @db.Date
  description String?
  createdAt   DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime     @default(now()) @updatedAt @db.Timestamptz(6)
  type        HolidayType?
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Leave {
  id               String   @id @default(cuid())
  userId           String
  approverId       String?
  leaveType        String
  startDate        DateTime @db.Timestamptz(6)
  endDate          DateTime @db.Timestamptz(6)
  status           String   @default("pending")
  leaveReason      String?
  approverComments String?
  createdAt        DateTime @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  approver         User?    @relation("approver", fields: [approverId], references: [id])
  User             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Overtime {
  id               String         @id @default(cuid())
  timeLogId        String
  requesterId      String
  approverId       String?
  requestedHours   Decimal?       @db.Decimal(5, 2)
  lateHours        Decimal?       @db.Decimal(5, 2)
  companyId        String?
  departmentId     String?
  requesterReason  String?
  approverComments String?
  status           overtimeStatus @default(pending)
  createdAt        DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime       @default(now()) @updatedAt @db.Timestamptz(6)
  company          Company?       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  department       Department?    @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  approver         User?          @relation("OTApprover", fields: [approverId], references: [id])
  requester        User           @relation("OTRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  timeLog          TimeLog        @relation(fields: [timeLogId], references: [id], onDelete: Cascade)

  @@index([timeLogId])
  @@index([companyId])
  @@index([departmentId])
}

model SubscriptionPlan {
  id           String         @id @default(cuid())
  name         String
  rangeOfUsers String
  description  String?
  price        Decimal        @db.Decimal(10, 2)
  features     Json
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime       @default(now()) @updatedAt @db.Timestamptz(6)
  Subscription Subscription[]
}

model Subscription {
  id        String           @id @default(cuid())
  userId    String
  companyId String
  planId    String
  startDate DateTime         @default(now()) @db.Timestamptz(6)
  endDate   DateTime?        @db.Timestamptz(6)
  active    Boolean          @default(true)
  createdAt DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt DateTime         @default(now()) @updatedAt @db.Timestamptz(6)
  company   Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  plan      SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum userStatus {
  active
  inactive
  deleted
}

enum DeletionRequestStatus {
  pending
  approved
  rejected
  completed
}

enum userRole {
  superadmin
  admin
  supervisor
  employee
}

enum leaveStatus {
  pending
  approved
  rejected
}

enum PresenceStatus {
  available
  away
  offline
}

enum overtimeStatus {
  pending
  approved
  rejected
}

enum employmentStatus {
  full_time
  part_time
}

enum exemptStatus {
  exempt
  non_exempt
}

enum employmentType {
  employee_W2
  contractor_1099
}

enum workLocation {
  onsite
  remote
  hybrid
}

enum AccrualFrequency {
  monthly
  yearly
  none
}

enum AccrualUnit {
  hours
  days
}

enum PayFrequency {
  weekly
  biweekly
  semimonthly
  monthly
}

enum PayrollRunStatus {
  draft
  processing
  finalized
  paid
  canceled
}

enum PayrollLineType {
  earning
  deduction
  contribution
  tax
  adjustment
}

enum PayrollCountry {
  PH
  US
  OTHER
}

enum HolidayType {
  regular
  special
  double
}

enum TaxAuthority {
  federal
  state
  local
}

enum Agency {
  SSS
  PhilHealth
  PagIBIG
  SocialSecurity
  Medicare
  CA_SDI
  FUTA
  SUTA
}
